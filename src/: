#include "Integrate.h"
#include "ODE.h"
#include "eigen3/Eigen/Dense"
#include <iostream>

namespace Numint
{
      namespace Integrate{
            Integrator::Integrator() = default;
            Eigen::VectorXd Integrator::integrate(const int steps, const double h, const Eigen::VectorXd init_state, Numint::ODE ode)
            {
                  return Eigen::VectorXd::Zero(1);
            }
            Euler::Euler() = default;
            Eigen::VectorXd Euler::integrate(const int steps, const double h, const Eigen::VectorXd init_state, Numint::ODE ode)
            {
                  assert(steps > 0);
                  assert(init_state.size() == ode.dim_model());
                  Eigen::VectorXd state = init_state;
                  for(int i = 0; i < steps; i++)
                  {
                        state += h * ode.RHS(state);
                  }
                  return state;
            }
            RK4::RK4() = default;
            Eigen::VectorXd RK4::integrate(const int steps, const double h, const Eigen::VectorXd init_state, Numint::ODE ode)
            {
                  assert(steps > 0);
                  std::cout << "int : init state size : " << init_state.size() << std::endl;
                  std::cout << "int : model size : " << ode.dim_model() << std::endl;
                  assert(init_state.size() == ode.dim_model());
                  Eigen::VectorXd state = init_state;
                  for(int i = 0; i < steps; i++)
                  {
                        Eigen::VectorXd k_a = ode.RHS(state);
                        Eigen::VectorXd k_b = ode.RHS(state + 0.5 * k_a);
                        Eigen::VectorXd k_c = ode.RHS(state + 0.5 * k_b);
                        Eigen::VectorXd k_d = ode.RHS(state + k_c);
                        state += (h / 6.0) * (k_a + 2 * k_b + 2 * k_c + k_d);
                  }
                  return state;
            }
      }
}
